#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

// Structure to represent a key-value pair
struct KeyValue {
    int key;
    int value;
};

// Structure to represent a hash table
struct HashTable {
    struct KeyValue* table[TABLE_SIZE];
};

// Initialize the hash table
void initialize(struct HashTable* ht) {
    for (int i = 0; i < TABLE_SIZE; i++) {
        ht->table[i] = NULL;
    }
}

// Hash function to map keys to an index in the table
int hash(int key) {
    return key % TABLE_SIZE;
}

// Insert a key-value pair into the hash table using linear probing
void insert(struct HashTable* ht, int key, int value) {
    int index = hash(key);

    while (ht->table[index] != NULL) {
        // Linear probing: move to the next index if collision occurs
        index = (index + 1) % TABLE_SIZE;
    }

    struct KeyValue* kv = malloc(sizeof(struct KeyValue));
    kv->key = key;
    kv->value = value;
    ht->table[index] = kv;
}

// Search for a value by key in the hash table
int search(struct HashTable* ht, int key) {
    int index = hash(key);

    while (ht->table[index] != NULL) {
        if (ht->table[index]->key == key) {
            return ht->table[index]->value;
        }
        // Linear probing: move to the next index if collision occurs
        index = (index + 1) % TABLE_SIZE;
    }

    // Key not found
    return -1;
}

int main() {
    struct HashTable ht;
    initialize(&ht);

    insert(&ht, 1, 10);
    insert(&ht, 2, 20);
    insert(&ht, 3, 30);
    insert(&ht, 4, 40);

    printf("Value for key 2: %d\n", search(&ht, 2)); // Should print 20
    printf("Value for key 5: %d\n", search(&ht, 5)); // Should print -1 (not found)

    return 0;
}
